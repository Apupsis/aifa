// @/app/api/api-chat/route.ts

import {
  appendClientMessage,
  appendResponseMessages,
  createDataStream,
  smoothStream,
  streamText,
} from "ai";
import { auth } from "@/app/@left/(_public)/(_AUTH)/(_service)/(_actions)/auth";
import {
  type RequestHints,
  systemPrompt,
} from "@/app/@left/(_public)/(_CHAT)/(chat)/(_service)/(_libs)/ai/prompts";
import { getTrailingMessageId } from "@/lib/utils";
import { isProductionEnvironment } from "@/app/@left/(_public)/(_CHAT)/(chat)/(_service)/(_constants)/constants";
import { myProvider } from "@/app/@left/(_public)/(_CHAT)/(chat)/(_service)/(_libs)/ai/providers";
import { entitlementsByUserType } from "@/app/@left/(_public)/(_CHAT)/(chat)/(_service)/(_libs)/ai/entitlements";
import { postRequestBodySchema, type PostRequestBody } from "../chat/schema";
import { geolocation } from "@vercel/functions";
import { NextResponse } from "next/server";
import { prisma } from "@/lib/db";
import { Message, Prisma } from "@prisma/client";
import { generateCuid } from "@/lib/utils/generateCuid";
import { extractSubFromJWT } from "@/lib/utils/extract-sub-from-jwt";

export const maxDuration = 60;

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ —Å —Ä–∞—Å—á–µ—Ç–æ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è GPT-4 Mini
 * @param prefix - –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
 * @param usage - –û–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
 * @param chatId - ID —á–∞—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
function logTokenUsage(
  prefix: string,
  usage: any,
  chatId?: string,
  userId?: string
) {
  if (!usage) {
    console.log(`${prefix} - –î–∞–Ω–Ω—ã–µ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã`);
    return;
  }

  const { promptTokens, completionTokens, totalTokens } = usage;

  console.log(`\nüî¢ ===== ${prefix.toUpperCase()} –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –¢–û–ö–ï–ù–û–í =====`);
  console.log(`üìä ID —á–∞—Ç–∞: ${chatId || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}`);
  console.log(`üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}`);
  console.log(`üì• –í—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã (–ü—Ä–æ–º–ø—Ç): ${promptTokens ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}`);
  console.log(
    `üì§ –ò—Å—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã (–û—Ç–≤–µ—Ç): ${completionTokens ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}`
  );
  console.log(`üîÑ –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: ${totalTokens ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}`);

  // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ GPT-4 Mini: –í—Ö–æ–¥ $0.15/1–ú, –í—ã—Ö–æ–¥ $0.60/1–ú
  if (promptTokens && completionTokens) {
    const inputCost = (promptTokens / 1000000) * 0.15;
    const outputCost = (completionTokens / 1000000) * 0.6;
    const totalCost = inputCost + outputCost;

    console.log(
      `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å GPT-4 Mini: $${totalCost.toFixed(8)} (–í—Ö–æ–¥: $${inputCost.toFixed(8)}, –í—ã—Ö–æ–¥: $${outputCost.toFixed(8)})`
    );

    const totalCostCents = totalCost * 100;
    console.log(`üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ü–µ–Ω—Ç–∞—Ö: ${totalCostCents.toFixed(6)}¬¢`);
  }

  console.log(`‚è∞ –í—Ä–µ–º—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: ${new Date().toISOString()}`);
  console.log(`üî¢ ===== –ö–û–ù–ï–¶ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –¢–û–ö–ï–ù–û–í =====\n`);
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç—ã
 * –∏ —Å—Ç—Ä–∏–º–∏–Ω–≥ AI-–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è API)
 */
export async function POST(request: Request) {
  let requestBody: PostRequestBody;
  try {
    const json = await request.json();
    requestBody = postRequestBodySchema.parse(json);
  } catch (e) {
    return new Response("–ù–µ–≤–µ—Ä–Ω–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞", { status: 400 });
  }

  try {
    const {
      id: chatId,
      message,
      selectedChatModel,
      selectedVisibilityType,
    } = requestBody;

    let session = await auth();

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ API —Ç–æ–∫–µ–Ω–∞ –µ—Å–ª–∏ –Ω–µ—Ç —Å–µ—Å—Å–∏–∏
    let token = request.headers.get("authorization");
    const expires = new Date(Date.now() + 60 * 60 * 4000).toISOString();

    if (!session && token) {
      const sub = extractSubFromJWT(token);
      session = {
        user: {
          id: sub || "",
          type: "apiUser",
        },
        expires,
      };
    }

    if (!session || session.user.id === "") {
      return new Response("–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", { status: 401 });
    }

    const userId = session.user.id;
    const userType = session.user.type;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ 24 —á–∞—Å–∞
    const messageCount = await prisma.message.count({
      where: {
        role: "user",
        createdAt: {
          gte: new Date(Date.now() - 24 * 60 * 60 * 1000),
        },
        Chat: {
          userId,
        },
      },
    });

    if (messageCount >= entitlementsByUserType[userType].maxMessagesPerDay) {
      return NextResponse.json(
        {
          error:
            "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤ 5 —Ä–∞–∑ –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å!",
          redirectTo: "/register",
          delay: 3000,
        },
        { status: 429 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞
    let chat = await prisma.chat.findUnique({ where: { id: chatId } });

    if (!chat) {
      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      const title = "Api Chat";
      chat = await prisma.chat.create({
        data: {
          id: chatId,
          userId: userId ? userId : "12345qwert",
          title,
          visibility: selectedVisibilityType,
          createdAt: new Date(),
        },
      });
    } else {
      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —á—É–∂–∏–º —á–∞—Ç–∞–º
      if (chat.userId !== userId) {
        return new Response("–ó–∞–ø—Ä–µ—â–µ–Ω–æ", { status: 403 });
      }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
    const previousMessages = await prisma.message.findMany({
      where: { chatId },
      orderBy: { createdAt: "asc" },
    });

    // –ú–∞–ø–ø–∏–Ω–≥ –º–æ–¥–µ–ª–∏ –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI
    const previousUImessages = previousMessages.map(
      ({ id, role, parts, attachments, createdAt }: Message) => ({
        id,
        role,
        parts,
        experimental_attachments: attachments,
        createdAt,
      })
    );

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è AI
    const messages = appendClientMessage({
      // @ts-expect-error: todo –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –∏–∑ DBMessage[] –≤ UIMessage[]
      messages: previousUImessages,
      message,
    });

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
    const { longitude, latitude, city, country } = geolocation(request);
    const requestHints: RequestHints = { longitude, latitude, city, country };

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await prisma.message.create({
      data: {
        id: message.id,
        chatId,
        role: "user",
        parts: message.parts,
        attachments: message.experimental_attachments ?? [],
        createdAt: new Date(),
      },
    });

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ç–µ–∫—Å—Ç–∞ AI (–±–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤)
    const stream = createDataStream({
      execute: (dataStream) => {
        const result = streamText({
          model: myProvider.languageModel("api-chat-support"),
          system: message.content,
          messages: [],
          maxSteps: 3, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 1 —à–∞–≥–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
          experimental_transform: smoothStream({ chunking: "word" }),
          experimental_generateMessageId: generateCuid,
          // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
          tools: {},
          onFinish: async ({ response, usage }) => {
            if (!session.user?.id) return;

            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
            logTokenUsage("API Chat Response", usage, chatId, userId);

            try {
              const assistantId = getTrailingMessageId({
                messages: response.messages.filter(
                  (m) => m.role === "assistant"
                ),
              });

              if (!assistantId)
                throw new Error("–°–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!");

              const [, assistantMessage] = appendResponseMessages({
                messages: [message],
                responseMessages: response.messages,
              });

              await prisma.message.create({
                data: {
                  id: assistantId,
                  chatId,
                  role: assistantMessage.role,
                  parts: assistantMessage.parts
                    ? JSON.parse(JSON.stringify(assistantMessage.parts))
                    : undefined,
                  attachments: (assistantMessage.experimental_attachments ??
                    []) as unknown as Prisma.InputJsonValue,
                  createdAt: new Date(),
                },
              });

              console.log(
                `‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è —á–∞—Ç–∞ ${chatId}`
              );
            } catch (error) {
              console.error(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:",
                error
              );
              console.error(
                `‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ - ID —á–∞—Ç–∞: ${chatId}, ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`
              );
            }
          },
          experimental_telemetry: {
            isEnabled: isProductionEnvironment,
            functionId: "api-stream-text",
          },
        });

        result.consumeStream();
        result.mergeIntoDataStream(dataStream);
      },
      onError: () => "–£–ø—Å, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!",
    });

    return new Response(stream);
  } catch (error) {
    console.error("POST /api-chat –æ—à–∏–±–∫–∞:", error);
    return new Response("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞!", {
      status: 500,
    });
  }
}
